https://www.valentinog.com/blog/react-redux-tutorial-beginners/

//mutable vs immutable
If the values of the properties attached to a given entity change over time, you say that the state of that entity is mutable. Otherwise, you say that the state is immutable.

a car may be created and destroyed, but it will keep its identity throughout its lifetime. It does not make sense to speak about the identity of something that does not exist yet or any more.

so the state of a car's color is mutable

{"color": "blue"}
{"color": "red"}

Mutable state is state that can be changed after you make the object (the color). Immutable state is state that cannot be changed(the car).



//Reducers

reducers are always written as a function that takes two params (state, action)
They are almost always a switch statement that returns the initial state as a default

Reducers produce the state of the application.

Redux says the only way to change the state is by sending a signal to the store.This signal is an action. “Dispatching an action” is the process of sending out a signal.

Now, how do you change an immutable state? You don’t. The resulting state is a copy of the current state plus the new data.

AS an app grows you can split a big reducer into separate functions and combine them with combineReducers()




// src/js/constants/action-types.js
the reason you use a file like this is to avoid errors that will be difficult 
to debug and could potentialy cause problems if left in the actions file




//... is a spread operator, example below
function sum(x, y, z) {
  return x + y + z;
}

const numbers = [1, 2, 3];

console.log(sum(...numbers));
//output: 6

console.log(sum(numbers));
//output: "1,2,3undefinedundefined"




//Pure function rules

The function always returns the same result if the same arguments are passed in. It does not depend on any state, or data, change during a program’s execution. It must only depend on its input arguments.

The function does not produce any observable side effects such as network requests, input and output devices, or data mutation.

Keep your functions by useing these functions
concat(), slice(), and …spread for arrays
Object.assign() and …spread for objects

*...spreads are not fully supported yet so you need this package to make them work
npm i --save-dev babel-plugin-transform-object-rest-spread


//Impure functions:
 Alters the original array or object.



//Redux API calls
store.getState()   for accessing the current state of the application
store.dispatch()   for dispatching an action
store.subscribe()   for listening on state changes



//UUID
A universally unique identifier (UUID) is a 128-bit number used to identify information in computer systems. The term globally unique identifier (GUID) is also used.























